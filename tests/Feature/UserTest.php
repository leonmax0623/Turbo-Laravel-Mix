<?php

namespace Tests\Feature;

use App\Models\Client;
use App\Models\RoleConst;
use App\Models\User;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;
use Exception;

class UserTest extends TestCase
{
    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::where('email', 'user@user.ru')->first();

        if (!$this->user) {
            throw new Exception('Нет пользователей в базе данных');
        }
    }

    public function test_roles_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/roles');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'roles')
            ->where('success', true)
            ->whereType('roles', 'array')
        );
    }

    public function test_roles_store()
    {
        $title = 'Роль '.rand();
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson('/api/roles', [
                'title' => $title,
                'permissions' => [RoleConst::PERMISSION_ROLES_CRUD]
            ]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'role')
            ->where('success', true)
            ->whereType('role', 'array')
            ->where('role.title', $title)
        );

        $this->assertDatabaseHas('roles', [
            'title' => $title
        ]);
    }

    public function test_users_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/users');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'users')
            ->where('success', true)
            ->whereType('users', 'array')
        );
    }

    public function test_users_store()
    {
        $user = User::factory()->make();

        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson('/api/users', [
                'name' => $user->name,
                'surname' => $user->surname,
                'password' => '11111111',
                'about' => $user->about,
                'email' => $user->email,
                'phone' => $user->phone,
                'department_id' => $user->department_id,
                'role_id' => 1
            ]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'user')
            ->where('success', true)
            ->whereType('user', 'array')
            ->where('user.name', $user->name)
            ->where('user.surname', $user->surname)
            ->where('user.about', $user->about)
            ->where('user.email', $user->email)
            ->where('user.phone', $user->phone)
            ->where('user.department.id', $user->department_id)
        );

        $this->assertDatabaseHas('users', [
            'email' => $user->email,
            'name' => $user->name,
            'phone' => $user->phone,
            'department_id' => $user->department_id
        ]);
    }

    public function test_clients_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/clients');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('clients', 'links', 'meta')
            ->whereType('clients', 'array')
        );
    }

    public function test_clients_store()
    {
        $client = Client::factory()->make();

        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson('/api/clients', [
                'name' => $client->name,
                'surname' => $client->surname,
                'department_id' => $client->department_id,
                'emails' => [],
                'phones' => $client->phones,
                'gender' => $client->gender,
                'passport' => $client->passport,
            ]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'client')
            ->where('success', true)
            ->whereType('client', 'array')
            ->where('client.name', $client->name)
            ->where('client.surname', $client->surname)
            ->where('client.gender', $client->gender)
            ->where('client.passport', $client->passport)
            ->where('client.department.id', $client->department_id)
        );

        $this->assertDatabaseHas('clients', [
            'name' => $client->name,
            'surname' => $client->surname,
            'department_id' => $client->department_id,
            'gender' => $client->gender,
            'passport' => $client->passport
        ]);
    }

    public function test_profile_update()
    {
        $name = 'test name'.rand();
        $email = 'user@user.ru';

        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->putJson('/api/profile', [
                'name' => $name,
                'email' => $email,
            ]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'user')
            ->where('success', true)
            ->whereType('user', 'array')
            ->where('user.name', $name)
            ->where('user.email', $email)
        );

        $this->assertDatabaseHas('users', [
            'name' => $name,
            'email' => $email,
        ]);
    }

    public function test_get_auth_user()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/auth/user');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'user')
            ->where('success', true)
            ->whereType('user', 'array')
            ->where('user.email', 'user@user.ru')
        );
    }
}
