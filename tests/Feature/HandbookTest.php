<?php

namespace Tests\Feature;

use Illuminate\Testing\Fluent\AssertableJson;
use App\Models\CarMark;
use App\Models\CarModel;
use App\Models\Department;
use App\Models\EngineVolume;
use App\Models\RoleConst;
use App\Models\User;
use Tests\TestCase;
use Exception;

class HandbookTest extends TestCase
{
    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::where('email', 'user@user.ru')->first();

        if (!$this->user) {
            throw new Exception('Нет пользователей в базе данных');
        }
    }

    public function test_cities_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/cities');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
            $json->hasAll('success', 'cities')
                ->where('success', true)
                ->whereType('cities', 'array')
        );
    }

    public function test_departments_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/departments');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'departments')
            ->where('success', true)
            ->whereType('departments', 'array')
        );
    }

    public function test_departments_store()
    {
        $department = Department::factory()->make();
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson('/api/departments', ['name' => $department->name]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'department')
            ->where('success', true)
            ->whereType('department', 'array')
            ->where('department.name', $department->name)
        );

        $this->assertDatabaseHas('departments', [
            'name' => $department->name,
        ]);
    }

    public function test_car_marks_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/car-marks');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'car_marks')
            ->where('success', true)
            ->whereType('car_marks', 'array')
        );
    }

    public function test_car_marks_store()
    {
        $carMark = CarMark::factory()->make();
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson('/api/car-marks', ['name' => $carMark->name]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'car_mark')
            ->where('success', true)
            ->whereType('car_mark', 'array')
            ->where('car_mark.name', $carMark->name)
        );

        $this->assertDatabaseHas('car_marks', [
            'name' => $carMark->name,
        ]);
    }

    public function test_car_models_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/car-models');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'car_models')
            ->where('success', true)
            ->whereType('car_models', 'array')
        );
    }

    public function test_car_models_store()
    {
        $carModel = CarModel::factory()->make();
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson('/api/car-models', [
                'name' => $carModel->name,
                'car_mark_id' => $carModel->car_mark_id
            ]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'car_model')
            ->where('success', true)
            ->whereType('car_model', 'array')
            ->where('car_model.name', $carModel->name)
            ->where('car_model.car_mark.id', $carModel->car_mark_id)
        );

        $this->assertDatabaseHas('car_models', [
            'name' => $carModel->name,
            'car_mark_id' => $carModel->car_mark_id
        ]);
    }

    public function test_fuels_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/fuels');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'fuels')
            ->where('success', true)
            ->whereType('fuels', 'array')
        );
    }

    public function test_fuels_store()
    {
        $name = 'Топливо '.rand();
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson('/api/fuels', [
                'name' => $name
            ]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'fuel')
            ->where('success', true)
            ->whereType('fuel', 'array')
            ->where('fuel.name', $name)
        );

        $this->assertDatabaseHas('fuels', [
            'name' => $name
        ]);
    }

    public function test_engine_volumes_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/engine-volumes');

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'engine_volumes')
            ->where('success', true)
            ->whereType('engine_volumes', 'array')
        );
    }

    public function test_engine_volumes_store()
    {
        $value = 3.3;
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson('/api/engine-volumes', [
                'value' => $value
            ]);

        $response->assertOk()->assertJson(fn (AssertableJson $json) =>
        $json->hasAll('success', 'engine_volume')
            ->where('success', true)
            ->whereType('engine_volume', 'array')
            ->where('engine_volume.value', (string)$value)
        );

        $this->assertDatabaseHas('engine_volumes', [
            'value' => $value
        ]);

        EngineVolume::where('value', $value)->delete();
    }
}
