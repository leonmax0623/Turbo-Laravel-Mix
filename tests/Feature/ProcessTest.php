<?php

namespace Tests\Feature;

use App\Models\AppealReason;
use App\Models\MapAnswer;
use App\Models\ProcessCategory;
use Illuminate\Testing\Fluent\AssertableJson;
use App\Models\RoleConst;
use App\Models\User;
use Tests\TestCase;
use Exception;

class ProcessTest extends TestCase
{
    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->user = User::where('email', 'user@user.ru')->first();

        if (!$this->user) {
            throw new Exception('Нет пользователей в базе данных');
        }
    }

    public function test_appeal_reasons_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/appeal-reasons');

        $response->assertOk()->assertJson(
            fn(AssertableJson $json) => $json->hasAll('appeal_reasons', 'success')
                ->where('success', true)
                ->whereType('appeal_reasons', 'array')
        );
    }

    public function test_appeal_reasons_store()
    {
        $appealReason = AppealReason::factory()->make();
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson(
                '/api/appeal-reasons',
                [
                    'name' => $appealReason->name,
                ]
            );

        $response->assertOk()->assertJson(
            fn(AssertableJson $json) => $json->hasAll('success', 'appeal_reason')
                ->where('success', true)
                ->whereType('appeal_reason', 'array')
                ->where('appeal_reason.name', $appealReason->name)
        );

        $this->assertDatabaseHas(
            'appeal_reasons',
            [
                'name' => $appealReason->name,
            ]
        );
    }

    public function test_process_categories_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/process-categories');

        $response->assertOk()->assertJson(
            fn(AssertableJson $json) => $json->hasAll('process_categories', 'success')
                ->where('success', true)
                ->whereType('process_categories', 'array')
        );
    }

    public function test_process_categories_store()
    {
        $processCategory = ProcessCategory::factory()->make();
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->postJson(
                '/api/process-categories',
                [
                    'name' => $processCategory->name,
                    'appeal_reason_id' => $processCategory->appeal_reason_id
                ]
            );

        $response->assertOk()->assertJson(
            fn(AssertableJson $json) => $json->hasAll('success', 'process_category')
                ->where('success', true)
                ->whereType('process_category', 'array')
                ->where('process_category.name', $processCategory->name)
                ->where('process_category.appeal_reason.id', $processCategory->appeal_reason_id)
        );

        $this->assertDatabaseHas(
            'process_categories',
            [
                'name' => $processCategory->name,
                'appeal_reason_id' => $processCategory->appeal_reason_id
            ]
        );
    }

    public function test_process_tasks_index()
    {
        $response = $this->actingAs($this->user, RoleConst::GUARD_NAME)
            ->getJson('/api/process-tasks');
        $response->assertOk()->assertJson(
            fn(AssertableJson $json) => $json->hasAll('process_tasks', 'meta', 'links')
                ->whereType('process_tasks', 'array')
        );
    }
}
